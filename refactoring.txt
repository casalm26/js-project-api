üõ†Ô∏è Refactor Agent Playbook

Goal: Walk every relevant source file one-by-one, making each as simple and idiomatic as possible while keeping the application continuously runnable.

‚∏ª

0. ‚úèÔ∏è Agent-Generated Task List

At start-up, the agent must scan the repo (see Scope below) and paste a Markdown check-list here.
Format example:

<!-- auto-generated -->
- [x] eslint.config.js
- [x] src/db.js  
- [x] src/server.js
- [x] src/routes/index.js
- [x] src/services/dataService.js
- [x] src/utils/thoughtsHelper.js
- [x] src/config/apiDocs.js
- [x] routes/thoughts.js ‚ö†Ô∏è (unlike functionality may need frontend investigation)
- [x] routes/auth.js
- [x] routes/users.js
- [x] controllers/authController.js
- [x] middleware/authMiddleware.js
- [x] middleware/rateLimiting.js
- [x] middleware/validation.js (consolidated from src/middleware/validation.js)
- [x] models/Thought.js
- [x] models/User.js
- [x] scripts/seedThoughts.js
- [x] tests/integration.test.js
- [x] tests/thoughts.test.js
- [x] tests/public.test.js
- [x] tests/auth.test.js
- [x] tests/setup.js

The agent will tick ([x]) each box when the corresponding file is fully refactored.

‚∏ª

1. Scope and Filtering Rules
	‚Ä¢	Include files with extensions .js, .jsx, .ts, .tsx, .mjs, .cjs, .jsonc.
	‚Ä¢	Exclude the following and anything inside them:
	‚Ä¢	.env*, package.json, package-lock.json, pnpm-lock.yaml, yarn.lock
	‚Ä¢	node_modules/**, dist/**, build/**, .git/**, .cache/**, coverage/**
	‚Ä¢	*.min.*, *.bundle.*, *.generated.*, *.log, media assets
	‚Ä¢	Skip any file larger than 250 KB or marked as generated.

‚∏ª

2. Architectural Rules

No.	Rule
2.1	Front-end code lives in React and plain JavaScript under frontend/ or src/ui/.
2.2	Back-end code lives in Node-style JavaScript under backend/ or src/server/.
2.3	Remove or merge single-file directories unless they exist for a clear boundary such as pages/ or routes/.
2.4	When moving code, update all import paths and adjust any module alias fields in package.json if required.
2.5	Deduplicate logic by extracting common code to shared/ utilities.


‚∏ª

3. One-File-at-a-Time Deep Refactor Workflow
	1.	Select the next unchecked file in the manifest.
	2.	Diagnose before editing:
	‚Ä¢	Run linters and tests that cover this file.
	‚Ä¢	Inspect import/export graph, function length, nesting depth, and recent commit history to understand responsibilities.
	3.	Plan structural changes if the file violates single responsibility or mixes layers. Write a brief outline in an internal note (not in source code) so the next agent step knows the plan.
	4.	Apply the refactor:
	‚Ä¢	Extract or move code to new or existing modules according to Section 2.
	‚Ä¢	Keep functions under fifty logical lines and cyclomatic complexity under ten.
	‚Ä¢	Remove all debugging and dead code (console.*, debugger, unused imports or variables).
	‚Ä¢	Retain only minimal JSDoc blocks above exported symbols. No inline commentary.
	5.	Run the full test suite and npm run lint. If anything fails, revert the changes and flag the file for manual review.
	6.	If tests pass:
	‚Ä¢	Mark the file as completed in the manifest.
	‚Ä¢	If new files were created, add them to the manifest so they are refactored in future iterations.
	‚Ä¢	Stop processing and wait for the next manual trigger. Do not commit, push, or provide a written summary of the changes.

‚∏ª

4. Supporting Automation
	‚Ä¢	Ensure lint and format scripts exist; create sensible defaults if absent.
	‚Ä¢	Apply ESLint and Prettier with --fix when confidence is high.
	‚Ä¢	Run a duplicate-code detector (jscpd) in the background; handle clones as they are encountered.
	‚Ä¢	Maintain a running CHANGELOG.md section titled ‚ÄúRefactor Sweep YYYY-MM‚Äù containing one bullet per refactored file (to be appended manually during review).

‚∏ª

5. Safety Nets
	‚Ä¢	Operate on a local branch named refactor-sweep-<YYYYMMDD> but do not commit automatically.
	‚Ä¢	After each refactor, tests and lint must pass before pausing.
	‚Ä¢	A manual reviewer will decide when to squash-commit and push a group of validated files.

‚∏ª

6. Exit Criteria
	1.	All manifest items are checked.
	2.	npm run test and npm run lint pass with zero errors.
	3.	No remaining console.* or debugger statements.
	4.	No duplicate blocks longer than ten lines or seventy-five tokens.
	5.	No orphan single-file directories remain.

‚∏ª

7. Optional Enhancements

Enable?	Enhancement	Benefit
‚òê	Use TypeScript --checkJs on the back end	Catches errors without full TS migration
‚òê	Add Storybook for UI components	Visual safeguard during refactor
‚òê	Track front-end bundle size in CI	Guards against bloat

Tick a box if you adopt an enhancement.

‚∏ª

Important: After each refactor cycle, do not output an explanatory summary. Your only visible action should be updating the checklist status.