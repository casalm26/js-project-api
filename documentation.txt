# Frontend Integration Instructions for Happy Thoughts API

## Overview
These instructions guide an agent to modify an existing Happy Thoughts frontend to work with the newly created backend API. This setup allows for local testing before deployment.

## Prerequisites
- Backend API running on `http://localhost:8080`
- Frontend project (React/JavaScript) in a separate repository
- Both projects running locally

## Backend Setup (Quick Reference)
1. Ensure MongoDB is running locally or use MongoDB Atlas
2. Create `.env` file in backend with:
   ```
   MONGO_URL=mongodb://localhost:27017/happythoughts
   JWT_SECRET=your-super-secret-jwt-key-here
   PORT=8080
   NODE_ENV=development
   ```
3. Run `npm install` and `npm run dev` to start backend on port 8080

## Frontend Modifications Required

### 1. Update API Base URL
**Location:** Look for API configuration file or constants
**Change:** Update base URL from existing API to local backend
```javascript
// OLD: const API_URL = "https://some-external-api.com/api"
const API_URL = "http://localhost:8080"
```

### 2. Authentication Implementation

#### A. Add Authentication State Management
Create or update authentication context/state:
```javascript
// Create AuthContext or similar
const [user, setUser] = useState(null)
const [token, setToken] = useState(localStorage.getItem('token'))

// Login function
const login = async (email, password) => {
  const response = await fetch(`${API_URL}/auth/login`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ email, password })
  })
  const data = await response.json()
  if (response.ok) {
    setToken(data.token)
    setUser(data.user)
    localStorage.setItem('token', data.token)
  }
  return data
}

// Signup function
const signup = async (email, password) => {
  const response = await fetch(`${API_URL}/auth/signup`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ email, password })
  })
  const data = await response.json()
  if (response.ok) {
    setToken(data.token)
    setUser(data.user)
    localStorage.setItem('token', data.token)
  }
  return data
}

// Logout function
const logout = () => {
  setToken(null)
  setUser(null)
  localStorage.removeItem('token')
}
```

#### B. Create Login/Signup Forms
Add forms for user authentication:
```javascript
// Login Form Component
const LoginForm = ({ onLogin }) => {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [error, setError] = useState('')

  const handleSubmit = async (e) => {
    e.preventDefault()
    try {
      const result = await login(email, password)
      if (result.error) {
        setError(result.details)
      } else {
        onLogin()
      }
    } catch (err) {
      setError('Login failed')
    }
  }

  return (
    <form onSubmit={handleSubmit}>
      <input 
        type="email" 
        value={email} 
        onChange={(e) => setEmail(e.target.value)}
        placeholder="Email"
        required 
      />
      <input 
        type="password" 
        value={password} 
        onChange={(e) => setPassword(e.target.value)}
        placeholder="Password"
        required 
      />
      <button type="submit">Login</button>
      {error && <p className="error">{error}</p>}
    </form>
  )
}
```

### 3. Update API Calls with Authentication

#### A. Create Authenticated Fetch Helper
```javascript
const authenticatedFetch = async (url, options = {}) => {
  const token = localStorage.getItem('token')
  const headers = {
    'Content-Type': 'application/json',
    ...(token && { Authorization: `Bearer ${token}` }),
    ...options.headers
  }
  
  return fetch(url, {
    ...options,
    headers
  })
}
```

#### B. Update Existing API Calls

**Get Thoughts (with pagination):**
```javascript
// OLD: const response = await fetch(`${API_URL}/thoughts`)
const fetchThoughts = async (page = 1, limit = 20) => {
  const response = await fetch(`${API_URL}/thoughts?page=${page}&limit=${limit}`)
  return response.json()
}
```

**Create New Thought (now requires authentication):**
```javascript
// OLD: Basic POST without auth
const createThought = async (message) => {
  const response = await authenticatedFetch(`${API_URL}/thoughts`, {
    method: 'POST',
    body: JSON.stringify({ message })
  })
  return response.json()
}
```

**Like/Unlike Thought:**
```javascript
const toggleLike = async (thoughtId) => {
  const response = await authenticatedFetch(`${API_URL}/thoughts/${thoughtId}/like`, {
    method: 'POST'
  })
  return response.json()
}
```

**Edit Thought (owner only):**
```javascript
const updateThought = async (thoughtId, message) => {
  const response = await authenticatedFetch(`${API_URL}/thoughts/${thoughtId}`, {
    method: 'PUT',
    body: JSON.stringify({ message })
  })
  return response.json()
}
```

**Delete Thought (owner only):**
```javascript
const deleteThought = async (thoughtId) => {
  const response = await authenticatedFetch(`${API_URL}/thoughts/${thoughtId}`, {
    method: 'DELETE'
  })
  return response.json()
}
```

### 4. Update UI Components

#### A. Conditional Rendering Based on Auth
```javascript
// Show different UI based on authentication status
{user ? (
  <div>
    <CreateThoughtForm />
    <ThoughtsList />
  </div>
) : (
  <div>
    <LoginForm />
    <SignupForm />
  </div>
)}
```

#### B. Update Thought Component
Add owner-only edit/delete buttons:
```javascript
const ThoughtItem = ({ thought, currentUser, onUpdate, onDelete }) => {
  const isOwner = currentUser && thought.owner && thought.owner._id === currentUser._id
  
  return (
    <div className="thought">
      <p>{thought.message}</p>
      <div className="actions">
        <button onClick={() => toggleLike(thought._id)}>
          ❤️ {thought.likesCount || 0}
        </button>
        {isOwner && (
          <>
            <button onClick={() => onEdit(thought._id, thought.message)}>Edit</button>
            <button onClick={() => onDelete(thought._id)}>Delete</button>
          </>
        )}
      </div>
      <small>
        {thought.owner ? `By: ${thought.owner.email}` : 'Anonymous'} • 
        {new Date(thought.createdAt).toLocaleString()}
      </small>
    </div>
  )
}
```

### 5. Error Handling
Update error handling to work with new API error format:
```javascript
const handleApiError = (response, data) => {
  if (!response.ok) {
    // Backend returns { error, details }
    throw new Error(data.details || data.error || 'Something went wrong')
  }
  return data
}

// Use in API calls:
const response = await fetch(`${API_URL}/thoughts`)
const data = await response.json()
return handleApiError(response, data)
```

### 6. Testing Locally

#### A. Start Both Services
1. Backend: `npm run dev` (runs on port 8080)
2. Frontend: `npm start` (typically runs on port 3000)

#### B. Test Authentication Flow
1. Try signing up with new email/password
2. Verify JWT token is stored in localStorage
3. Test login with created credentials
4. Verify authenticated state persists on page refresh

#### C. Test CRUD Operations
1. Create new thoughts (requires login)
2. View all thoughts (public)
3. Like/unlike thoughts (requires login)
4. Edit your own thoughts (owner only)
5. Delete your own thoughts (owner only)
6. Verify you cannot edit/delete others' thoughts

#### D. Test Error Cases
1. Login with wrong credentials
2. Try creating thoughts without authentication
3. Try editing/deleting others' thoughts
4. Test with invalid thought IDs

### 7. Common Issues & Solutions

#### CORS Issues
- Ensure backend has `cors()` middleware enabled
- Backend should allow requests from frontend origin

#### Token Expiration
- Backend tokens expire, implement refresh logic or re-login
- Handle 401 responses by redirecting to login

#### Data Format Changes
- Backend may return different data structure than previous API
- Update UI components to match new response format

### 8. Deployment Preparation

When ready to deploy:
1. Update API_URL to deployed backend URL
2. Set environment variables in frontend build
3. Ensure CORS is configured for production domains
4. Test authentication flow with deployed backend

## Expected API Endpoints

- `POST /auth/signup` - User registration
- `POST /auth/login` - User login
- `GET /thoughts` - Get all thoughts (public)
- `POST /thoughts` - Create thought (auth required)
- `GET /thoughts/:id` - Get single thought (public)
- `PUT /thoughts/:id` - Update thought (owner only)
- `DELETE /thoughts/:id` - Delete thought (owner only)
- `POST /thoughts/:id/like` - Toggle like (auth required)

All authenticated endpoints require `Authorization: Bearer <token>` header.
